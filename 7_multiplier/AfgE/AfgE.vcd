$date
  Tue Oct 13 00:17:02 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module asm_tb $end
$var reg 4 ! a[3:0] $end
$var reg 4 " b[3:0] $end
$var reg 8 # sum[7:0] $end
$scope module multiplier $end
$var reg 4 $ a[3:0] $end
$var reg 4 % b[3:0] $end
$var reg 8 & sum[7:0] $end
$var reg 8 ' a0[7:0] $end
$var reg 8 ( a1[7:0] $end
$var reg 8 ) a2[7:0] $end
$var reg 8 * a3[7:0] $end
$var reg 8 + p0[7:0] $end
$var reg 8 , p1[7:0] $end
$var reg 8 - p2[7:0] $end
$var reg 8 . p3[7:0] $end
$scope module addone $end
$var reg 8 / a[7:0] $end
$var reg 8 0 b[7:0] $end
$var reg 1 1 sin $end
$var reg 1 2 cout $end
$var reg 8 3 sum[7:0] $end
$var reg 1 4 wire_1 $end
$var reg 1 5 wire_2 $end
$var reg 1 6 wire_3 $end
$var reg 1 7 wire_4 $end
$var reg 1 8 wire_5 $end
$var reg 1 9 wire_6 $end
$var reg 1 : wire_7 $end
$var reg 1 ; wire_8 $end
$var reg 8 < btwo[7:0] $end
$scope module add0 $end
$var reg 1 = a $end
$var reg 1 > b $end
$var reg 1 ? cin $end
$var reg 1 @ cout $end
$var reg 1 A sum $end
$var reg 1 B wire_1 $end
$var reg 1 C wire_2 $end
$var reg 1 D wire_3 $end
$upscope $end
$scope module add1 $end
$var reg 1 E a $end
$var reg 1 F b $end
$var reg 1 G cin $end
$var reg 1 H cout $end
$var reg 1 I sum $end
$var reg 1 J wire_1 $end
$var reg 1 K wire_2 $end
$var reg 1 L wire_3 $end
$upscope $end
$scope module add2 $end
$var reg 1 M a $end
$var reg 1 N b $end
$var reg 1 O cin $end
$var reg 1 P cout $end
$var reg 1 Q sum $end
$var reg 1 R wire_1 $end
$var reg 1 S wire_2 $end
$var reg 1 T wire_3 $end
$upscope $end
$scope module add3 $end
$var reg 1 U a $end
$var reg 1 V b $end
$var reg 1 W cin $end
$var reg 1 X cout $end
$var reg 1 Y sum $end
$var reg 1 Z wire_1 $end
$var reg 1 [ wire_2 $end
$var reg 1 \ wire_3 $end
$upscope $end
$scope module add4 $end
$var reg 1 ] a $end
$var reg 1 ^ b $end
$var reg 1 _ cin $end
$var reg 1 ` cout $end
$var reg 1 a sum $end
$var reg 1 b wire_1 $end
$var reg 1 c wire_2 $end
$var reg 1 d wire_3 $end
$upscope $end
$scope module add5 $end
$var reg 1 e a $end
$var reg 1 f b $end
$var reg 1 g cin $end
$var reg 1 h cout $end
$var reg 1 i sum $end
$var reg 1 j wire_1 $end
$var reg 1 k wire_2 $end
$var reg 1 l wire_3 $end
$upscope $end
$scope module add6 $end
$var reg 1 m a $end
$var reg 1 n b $end
$var reg 1 o cin $end
$var reg 1 p cout $end
$var reg 1 q sum $end
$var reg 1 r wire_1 $end
$var reg 1 s wire_2 $end
$var reg 1 t wire_3 $end
$upscope $end
$scope module add7 $end
$var reg 1 u a $end
$var reg 1 v b $end
$var reg 1 w cin $end
$var reg 1 x cout $end
$var reg 1 y sum $end
$var reg 1 z wire_1 $end
$var reg 1 { wire_2 $end
$var reg 1 | wire_3 $end
$upscope $end
$upscope $end
$scope module addtwo $end
$var reg 8 } a[7:0] $end
$var reg 8 !" b[7:0] $end
$var reg 1 "" sin $end
$var reg 1 #" cout $end
$var reg 8 $" sum[7:0] $end
$var reg 1 %" wire_1 $end
$var reg 1 &" wire_2 $end
$var reg 1 '" wire_3 $end
$var reg 1 (" wire_4 $end
$var reg 1 )" wire_5 $end
$var reg 1 *" wire_6 $end
$var reg 1 +" wire_7 $end
$var reg 1 ," wire_8 $end
$var reg 8 -" btwo[7:0] $end
$scope module add0 $end
$var reg 1 ." a $end
$var reg 1 /" b $end
$var reg 1 0" cin $end
$var reg 1 1" cout $end
$var reg 1 2" sum $end
$var reg 1 3" wire_1 $end
$var reg 1 4" wire_2 $end
$var reg 1 5" wire_3 $end
$upscope $end
$scope module add1 $end
$var reg 1 6" a $end
$var reg 1 7" b $end
$var reg 1 8" cin $end
$var reg 1 9" cout $end
$var reg 1 :" sum $end
$var reg 1 ;" wire_1 $end
$var reg 1 <" wire_2 $end
$var reg 1 =" wire_3 $end
$upscope $end
$scope module add2 $end
$var reg 1 >" a $end
$var reg 1 ?" b $end
$var reg 1 @" cin $end
$var reg 1 A" cout $end
$var reg 1 B" sum $end
$var reg 1 C" wire_1 $end
$var reg 1 D" wire_2 $end
$var reg 1 E" wire_3 $end
$upscope $end
$scope module add3 $end
$var reg 1 F" a $end
$var reg 1 G" b $end
$var reg 1 H" cin $end
$var reg 1 I" cout $end
$var reg 1 J" sum $end
$var reg 1 K" wire_1 $end
$var reg 1 L" wire_2 $end
$var reg 1 M" wire_3 $end
$upscope $end
$scope module add4 $end
$var reg 1 N" a $end
$var reg 1 O" b $end
$var reg 1 P" cin $end
$var reg 1 Q" cout $end
$var reg 1 R" sum $end
$var reg 1 S" wire_1 $end
$var reg 1 T" wire_2 $end
$var reg 1 U" wire_3 $end
$upscope $end
$scope module add5 $end
$var reg 1 V" a $end
$var reg 1 W" b $end
$var reg 1 X" cin $end
$var reg 1 Y" cout $end
$var reg 1 Z" sum $end
$var reg 1 [" wire_1 $end
$var reg 1 \" wire_2 $end
$var reg 1 ]" wire_3 $end
$upscope $end
$scope module add6 $end
$var reg 1 ^" a $end
$var reg 1 _" b $end
$var reg 1 `" cin $end
$var reg 1 a" cout $end
$var reg 1 b" sum $end
$var reg 1 c" wire_1 $end
$var reg 1 d" wire_2 $end
$var reg 1 e" wire_3 $end
$upscope $end
$scope module add7 $end
$var reg 1 f" a $end
$var reg 1 g" b $end
$var reg 1 h" cin $end
$var reg 1 i" cout $end
$var reg 1 j" sum $end
$var reg 1 k" wire_1 $end
$var reg 1 l" wire_2 $end
$var reg 1 m" wire_3 $end
$upscope $end
$upscope $end
$scope module addthree $end
$var reg 8 n" a[7:0] $end
$var reg 8 o" b[7:0] $end
$var reg 1 p" sin $end
$var reg 1 q" cout $end
$var reg 8 r" sum[7:0] $end
$var reg 1 s" wire_1 $end
$var reg 1 t" wire_2 $end
$var reg 1 u" wire_3 $end
$var reg 1 v" wire_4 $end
$var reg 1 w" wire_5 $end
$var reg 1 x" wire_6 $end
$var reg 1 y" wire_7 $end
$var reg 1 z" wire_8 $end
$var reg 8 {" btwo[7:0] $end
$scope module add0 $end
$var reg 1 |" a $end
$var reg 1 }" b $end
$var reg 1 !# cin $end
$var reg 1 "# cout $end
$var reg 1 ## sum $end
$var reg 1 $# wire_1 $end
$var reg 1 %# wire_2 $end
$var reg 1 &# wire_3 $end
$upscope $end
$scope module add1 $end
$var reg 1 '# a $end
$var reg 1 (# b $end
$var reg 1 )# cin $end
$var reg 1 *# cout $end
$var reg 1 +# sum $end
$var reg 1 ,# wire_1 $end
$var reg 1 -# wire_2 $end
$var reg 1 .# wire_3 $end
$upscope $end
$scope module add2 $end
$var reg 1 /# a $end
$var reg 1 0# b $end
$var reg 1 1# cin $end
$var reg 1 2# cout $end
$var reg 1 3# sum $end
$var reg 1 4# wire_1 $end
$var reg 1 5# wire_2 $end
$var reg 1 6# wire_3 $end
$upscope $end
$scope module add3 $end
$var reg 1 7# a $end
$var reg 1 8# b $end
$var reg 1 9# cin $end
$var reg 1 :# cout $end
$var reg 1 ;# sum $end
$var reg 1 <# wire_1 $end
$var reg 1 =# wire_2 $end
$var reg 1 ># wire_3 $end
$upscope $end
$scope module add4 $end
$var reg 1 ?# a $end
$var reg 1 @# b $end
$var reg 1 A# cin $end
$var reg 1 B# cout $end
$var reg 1 C# sum $end
$var reg 1 D# wire_1 $end
$var reg 1 E# wire_2 $end
$var reg 1 F# wire_3 $end
$upscope $end
$scope module add5 $end
$var reg 1 G# a $end
$var reg 1 H# b $end
$var reg 1 I# cin $end
$var reg 1 J# cout $end
$var reg 1 K# sum $end
$var reg 1 L# wire_1 $end
$var reg 1 M# wire_2 $end
$var reg 1 N# wire_3 $end
$upscope $end
$scope module add6 $end
$var reg 1 O# a $end
$var reg 1 P# b $end
$var reg 1 Q# cin $end
$var reg 1 R# cout $end
$var reg 1 S# sum $end
$var reg 1 T# wire_1 $end
$var reg 1 U# wire_2 $end
$var reg 1 V# wire_3 $end
$upscope $end
$scope module add7 $end
$var reg 1 W# a $end
$var reg 1 X# b $end
$var reg 1 Y# cin $end
$var reg 1 Z# cout $end
$var reg 1 [# sum $end
$var reg 1 \# wire_1 $end
$var reg 1 ]# wire_2 $end
$var reg 1 ^# wire_3 $end
$upscope $end
$upscope $end
$scope module addfour $end
$var reg 8 _# a[7:0] $end
$var reg 8 `# b[7:0] $end
$var reg 1 a# sin $end
$var reg 1 b# cout $end
$var reg 8 c# sum[7:0] $end
$var reg 1 d# wire_1 $end
$var reg 1 e# wire_2 $end
$var reg 1 f# wire_3 $end
$var reg 1 g# wire_4 $end
$var reg 1 h# wire_5 $end
$var reg 1 i# wire_6 $end
$var reg 1 j# wire_7 $end
$var reg 1 k# wire_8 $end
$var reg 8 l# btwo[7:0] $end
$scope module add0 $end
$var reg 1 m# a $end
$var reg 1 n# b $end
$var reg 1 o# cin $end
$var reg 1 p# cout $end
$var reg 1 q# sum $end
$var reg 1 r# wire_1 $end
$var reg 1 s# wire_2 $end
$var reg 1 t# wire_3 $end
$upscope $end
$scope module add1 $end
$var reg 1 u# a $end
$var reg 1 v# b $end
$var reg 1 w# cin $end
$var reg 1 x# cout $end
$var reg 1 y# sum $end
$var reg 1 z# wire_1 $end
$var reg 1 {# wire_2 $end
$var reg 1 |# wire_3 $end
$upscope $end
$scope module add2 $end
$var reg 1 }# a $end
$var reg 1 !$ b $end
$var reg 1 "$ cin $end
$var reg 1 #$ cout $end
$var reg 1 $$ sum $end
$var reg 1 %$ wire_1 $end
$var reg 1 &$ wire_2 $end
$var reg 1 '$ wire_3 $end
$upscope $end
$scope module add3 $end
$var reg 1 ($ a $end
$var reg 1 )$ b $end
$var reg 1 *$ cin $end
$var reg 1 +$ cout $end
$var reg 1 ,$ sum $end
$var reg 1 -$ wire_1 $end
$var reg 1 .$ wire_2 $end
$var reg 1 /$ wire_3 $end
$upscope $end
$scope module add4 $end
$var reg 1 0$ a $end
$var reg 1 1$ b $end
$var reg 1 2$ cin $end
$var reg 1 3$ cout $end
$var reg 1 4$ sum $end
$var reg 1 5$ wire_1 $end
$var reg 1 6$ wire_2 $end
$var reg 1 7$ wire_3 $end
$upscope $end
$scope module add5 $end
$var reg 1 8$ a $end
$var reg 1 9$ b $end
$var reg 1 :$ cin $end
$var reg 1 ;$ cout $end
$var reg 1 <$ sum $end
$var reg 1 =$ wire_1 $end
$var reg 1 >$ wire_2 $end
$var reg 1 ?$ wire_3 $end
$upscope $end
$scope module add6 $end
$var reg 1 @$ a $end
$var reg 1 A$ b $end
$var reg 1 B$ cin $end
$var reg 1 C$ cout $end
$var reg 1 D$ sum $end
$var reg 1 E$ wire_1 $end
$var reg 1 F$ wire_2 $end
$var reg 1 G$ wire_3 $end
$upscope $end
$scope module add7 $end
$var reg 1 H$ a $end
$var reg 1 I$ b $end
$var reg 1 J$ cin $end
$var reg 1 K$ cout $end
$var reg 1 L$ sum $end
$var reg 1 M$ wire_1 $end
$var reg 1 N$ wire_2 $end
$var reg 1 O$ wire_3 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b1010 !
b1101 "
b10000010 #
b1010 $
b1101 %
b10000010 &
b00001010 '
b00000000 (
b00101000 )
b01010000 *
b00000000 +
b00001010 ,
b00001010 -
b00110010 .
b00001010 /
b00000000 0
01
02
b00001010 3
04
05
06
07
08
09
0:
U;
b00000000 <
0=
0>
0?
0@
0A
0B
0C
0D
1E
0F
0G
0H
1I
0J
1K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
1U
0V
0W
0X
1Y
0Z
1[
0\
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
b00000000 }
b00001010 !"
0""
0#"
b00001010 $"
0%"
0&"
0'"
0("
0)"
0*"
0+"
U,"
b00001010 -"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
17"
08"
09"
1:"
0;"
1<"
0="
0>"
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
1G"
0H"
0I"
1J"
0K"
1L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
0g"
0h"
0i"
0j"
0k"
0l"
0m"
b00101000 n"
b00001010 o"
0p"
0q"
b00110010 r"
0s"
0t"
0u"
1v"
0w"
0x"
0y"
Uz"
b00001010 {"
0|"
0}"
0!#
0"#
0##
0$#
0%#
0&#
0'#
1(#
0)#
0*#
1+#
0,#
1-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
17#
18#
09#
1:#
0;#
1<#
0=#
0>#
0?#
0@#
1A#
0B#
1C#
0D#
0E#
0F#
1G#
0H#
0I#
0J#
1K#
0L#
1M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0]#
0^#
b01010000 _#
b00110010 `#
0a#
0b#
b10000010 c#
0d#
0e#
0f#
0g#
1h#
1i#
1j#
Uk#
b00110010 l#
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
1v#
0w#
0x#
1y#
0z#
1{#
0|#
0}#
0!$
0"$
0#$
0$$
0%$
0&$
0'$
0($
0)$
0*$
0+$
0,$
0-$
0.$
0/$
10$
11$
02$
13$
04$
15$
06$
07$
08$
19$
1:$
1;$
0<$
0=$
1>$
1?$
1@$
0A$
1B$
1C$
0D$
0E$
1F$
1G$
0H$
0I$
1J$
0K$
1L$
0M$
0N$
0O$
#10000000
b0111 "
b01000110 #
b0111 %
b01000110 &
b00010100 (
b00000000 *
b00011110 -
b01000110 .
b00010100 }
b00011110 $"
1>"
1B"
1D"
1N"
1R"
1T"
b00011110 o"
b01000110 r"
1w"
1x"
b00011110 {"
10#
13#
15#
1@#
1B#
0C#
1E#
1F#
1I#
1J#
0K#
1N#
1Q#
1S#
b00000000 _#
b01000110 `#
b01000110 c#
0h#
0i#
0j#
b01000110 l#
1!$
1$$
1&$
00$
01$
03$
04$
05$
06$
09$
0:$
0;$
0<$
0>$
0?$
0@$
1A$
0B$
0C$
1D$
1F$
0G$
0J$
0L$
#20000000
b1001 !
b1101 "
b01110101 #
b1001 $
b1101 %
b01110101 &
b00001001 '
b00000000 (
b00100100 )
b01001000 *
b00001001 ,
b00001001 -
b00101101 .
b00001001 /
b00001001 3
1=
1A
1C
0E
0I
0K
b00000000 }
b00001001 !"
b00001001 $"
b00001001 -"
1/"
12"
14"
07"
0:"
0<"
0>"
0B"
0D"
0N"
0R"
0T"
b00100100 n"
b00001001 o"
b00101101 r"
0u"
0v"
0w"
0x"
b00001001 {"
1}"
1##
1%#
0(#
0+#
0-#
1/#
00#
02#
13#
04#
15#
07#
09#
0:#
1;#
0<#
1=#
0>#
0@#
0A#
0B#
0C#
0E#
0F#
0I#
0J#
1K#
0N#
0Q#
0S#
b01001000 _#
b00101101 `#
b01110101 c#
1g#
0h#
0i#
0j#
b00101101 l#
1n#
1q#
1s#
0v#
0y#
0{#
1!$
1$$
1&$
1($
1)$
1+$
0,$
1-$
0.$
01$
12$
03$
14$
06$
07$
19$
0:$
0;$
1<$
1>$
0?$
1@$
0A$
0B$
0C$
1D$
0E$
1F$
0G$
0J$
0L$
#30000000
b0111 "
b00111111 #
b0111 %
b00111111 &
b00010010 (
b00000000 *
b00011011 -
b00111111 .
b00010010 }
b00011011 $"
16"
1:"
1<"
1N"
1R"
1T"
b00011011 o"
b00111111 r"
b00011011 {"
1(#
1+#
1-#
1@#
1C#
1E#
b00000000 _#
b00111111 `#
b00111111 c#
0g#
b00111111 l#
1v#
1y#
1{#
0($
0+$
1,$
0-$
1.$
11$
02$
14$
16$
0@$
0D$
0F$
#40000000
